I'll provide a comprehensive list of all endpoints in the project for testing in Postman. Let me analyze the routes and controllers:

### 1. Authentication Endpoints

#### 1.1. User/Donor Signup
```
POST http://localhost:3000/api/auth/signup

Request Body:
{
    "name": "Donor 1",
    "email": "donor1@gmail.com",
    "password": "donor100"  // minimum 8 characters
}

Response (201 Created):
{
    "status": "success",
    "message": "User created successfully",
    "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjQsImVtYWlsIjoiZG9ub3IxQGdtYWlsLmNvbSIsInJvbGUiOiJkb25vciIsImlhdCI6MTc0NTA0MjI2NCwiZXhwIjoxNzQ1MTI4NjY0fQ.p18FQT9HAPOxbeHWWwIi5GgkEO5a5mM_hjhvcxl9Ve8",
    "user": {
        "id": 4,
        "name": "Donor 1",
        "email": "donor1@gmail.com",
        "role": "donor"
    }
}

Possible Errors:
400 - "All fields are required"
400 - "Invalid email format"
400 - "Password must be at least 8 characters long"
409 - "User already exists"
```

#### 1.2. User/Donor Login
```
POST http://localhost:3000/api/auth/login

Request Body:
{
    "email": "donor1@gmail.com",
    "password": "donor100"
}

Response (200 OK):
{
    "status": "success",
    "message": "Login successful",
    "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjQsImVtYWlsIjoiZG9ub3IxQGdtYWlsLmNvbSIsInJvbGUiOiJkb25vciIsImlhdCI6MTc0NTA0MjYwNSwiZXhwIjoxNzQ1MTI5MDA1fQ.u47jQAyRYwO6ezSHjtScHcz8nkLLou2f4Z2Mvr6b9xg",
    "user": {
        "id": 4,
        "name": "Donor 1",
        "email": "donor1@gmail.com",
        "role": "donor"
    }
}

Possible Errors:
400 - "Email and password are required"
401 - "Invalid credentials"
```

#### 1.3. Admin Signup
```
POST http://localhost:3000/api/auth/admin/signup

Request Body:
{
    "name": "Admin 1",
    "email": "admin1@gmail.com",
    "password": "admin100",
    "adminCode": "admin123"
}

Response (201 Created):
{
    "status": "success",
    "message": "Admin user created successfully",
    "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjUsImVtYWlsIjoiYWRtaW4xQGdtYWlsLmNvbSIsInJvbGUiOiJhZG1pbiIsImlhdCI6MTc0NTA0MjcwMiwiZXhwIjoxNzQ1MTI5MTAyfQ.BI2iJqEq9IuFMyPYZWAt9gghPfo3kC2VW0iYOf2olr4",
    "user": {
        "id": 5,
        "name": "Admin 1",
        "email": "admin1@gmail.com",
        "role": "admin"
    }
}

Possible Errors:
400 - "All fields are required including admin registration code"
400 - "Invalid email format"
400 - "Password must be at least 8 characters long"
403 - "Invalid admin registration code"
409 - "User already exists"
500 - "Admin registration is not properly configured"
```

#### 1.4. Admin Login
```
POST http://localhost:3000/api/auth/admin/login

Request Body:
{
    "email": "admin1@gmail.com",
    "password": "admin100"
}

Response (200 OK):
{
    "status": "success",
    "message": "Admin login successful",
    "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjUsImVtYWlsIjoiYWRtaW4xQGdtYWlsLmNvbSIsInJvbGUiOiJhZG1pbiIsImlhdCI6MTc0NTA0Mjc1MCwiZXhwIjoxNzQ1MTI5MTUwfQ.BjYwVx1BTXGvdwREw7jiivVbJxfjDkkzSSwWjv3_9lw",
    "user": {
        "id": 5,
        "name": "Admin 1",
        "email": "admin1@gmail.com",
        "role": "admin"
    }
}

Possible Errors:
400 - "Email and password are required"
401 - "Invalid credentials"
403 - "Access denied: Admin privileges required"
```

### 2. Project Endpoints

#### 2.1. List All Projects (Public)
```
GET http://localhost:3000/api/projects

Response (200 OK):
{
    "status": "success",
    "results": 2,
    "projects": [
        {
            "id": 1,
            "name": "Project One",
            "description": "Description here",
            "goal_amount": "1000.00",
            "current_amount": "100.00",
            "status": "active",
            "created_at": "2025-04-15T10:00:00Z"
        }
    ]
}
```

#### 2.2. Get Single Project (Public)
```
GET http://localhost:3000/api/projects/:id

Response (200 OK):
{
    "status": "success",
    "project": {
        "id": 1,
        "name": "Project One",
        "description": "Description here",
        "goal_amount": "1000.00",
        "current_amount": "100.00",
        "status": "active",
        "created_at": "2025-04-15T10:00:00Z"
    }
}

Possible Errors:
404 - "Project not found"
```

#### 2.3. Create Project (Admin Only)
```
POST http://localhost:3000/api/projects
Headers:
{
    "Authorization": "Bearer <admin_jwt_token>"
}

Request Body:
{
    "name": "New Project",
    "description": "Project description",
    "goalAmount": 5000.00
}

Response (201 Created):
{
    "status": "success",
    "message": "Project created successfully",
    "project": {
        "id": 1,
        "name": "Clean Drinking Water for All",
        "description": "Provide clean and potable water to drought affected African villages.",
        "goal_amount": "5000000.00",
        "current_amount": "0.00",
        "status": "active",
        "created_at": "2025-04-19T06:15:35.955Z"
    }
}

Possible Errors:
400 - "Project name and goal amount are required"
400 - "Goal amount must be greater than 0"
401 - "Authentication token required"
403 - "Access denied. Admin privileges required"
```

#### 2.4. Update Project (Admin Only)
```
PUT http://localhost:3000/api/projects/:id
Headers:
{
    "Authorization": "Bearer <admin_jwt_token>"
}

Request Body:
{
    "name": "Updated Project Name",
    "description": "Updated description",
    "goalAmount": 6000.00,
    "status": "completed"
}

Response (200 OK):
{
    "status": "success",
    "message": "Project updated successfully",
    "project": {
        "id": 1,
        "name": "Updated Project Name",
        "description": "Updated description",
        "goal_amount": "6000.00",
        "current_amount": "100.00",
        "status": "completed",
        "created_at": "2025-04-15T10:00:00Z"
    }
}

Possible Errors:
400 - "Goal amount must be greater than 0"
400 - "No updates provided"
401 - "Authentication token required"
403 - "Access denied. Admin privileges required"
404 - "Project not found"
```

#### 2.5. Delete Project (Admin Only)
```
DELETE http://localhost:3000/api/projects/:id
Headers:
{
    "Authorization": "Bearer <admin_jwt_token>"
}

Response (200 OK):
{
    "status": "success",
    "message": "Project deleted successfully"
}

Possible Errors:
401 - "Authentication token required"
403 - "Access denied. Admin privileges required"
404 - "Project not found"
```

### 3. Donation Endpoints

#### 3.1. Get User's Donation History
```
GET http://localhost:3000/api/donations/history
Headers:
{
    "Authorization": "Bearer <user_jwt_token>"
}

Response (200 OK):
{
    "status": "success",
    "data": {
        "user": {
            "name": "John Doe",
            "email": "john@example.com"
        },
        "donations": [
            {
                "amount": "100.00",
                "donation_date": "2025-04-15T10:30:00Z",
                "status": "completed",
                "receipt_url": "http://example.com/receipt/1"
            }
        ]
    }
}

Possible Errors:
401 - "Authentication token required"
403 - "Invalid or expired token"
404 - "No donations found for this user"
```

#### 3.2. Make a Donation
```
POST http://localhost:3000/api/donations/make-donation
Headers:
{
    "Authorization": "Bearer <user_jwt_token>"
}

Request Body:
{
    "projectId": 2,
    "amount": 15000.00,
    "paymentMethod": "UPI_Intent",
    "notes": "Thank you for helping those children."
}

Response (201 Created):
{
    "status": "success",
    "message": "Donation created successfully",
    "donation": {
        "id": 1,
        "user_id": 4,
        "project_id": 2,
        "amount": "15000.00",
        "donation_date": "2025-04-19T06:47:02.126Z",
        "status": "completed",
        "receipt_url": null,
        "payment_method": "UPI_Intent",
        "transaction_id": "TXN_20250419064702_02ECBB",
        "notes": "Thank you for helping those children."
    }
}

Possible Errors:
400 - "Project ID, amount, and payment method are required"
400 - "Donation amount must be greater than 0"
400 - "Cannot donate to an inactive project"
401 - "Authentication token required"
403 - "Invalid or expired token"
404 - "Project not found"
```

Testing Notes:
1. Replace `http://localhost:3000` with your actual server URL if different
2. After signup/login, use the returned JWT token in the Authorization header for protected routes
3. The token format should be: `Bearer <token>`
4. For admin routes, make sure to use a token obtained from admin login
5. The `:id` in URLs should be replaced with actual project IDs
6. All request bodies should have Content-Type: application/json header

Would you like me to provide example data for testing any specific endpoint?
